/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package shadow_support;

import com.mongodb.BasicDBObject;
import com.mongodb.DB;
import com.mongodb.DBCollection;
import com.mongodb.DBCursor;
import com.mongodb.DBObject;
import com.mongodb.MongoClient;
import com.mongodb.MongoClientURI;
import java.awt.Desktop;
import java.awt.Dimension;
import java.awt.Toolkit;
import java.awt.event.KeyEvent;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.net.UnknownHostException;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import org.apache.poi.hssf.usermodel.HSSFSheet;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.Row;

/**
 *
 * @author AGALLARD
 */
public class Frame extends javax.swing.JFrame {
  private final String sUri = "mongodb://agallard:Diciembre2016$@ds161497.mlab.com:61497/shadow_support";
  private final ArrayList<Ticket> tickets = new ArrayList<Ticket>();
  private final MongoClientURI uri = new MongoClientURI(sUri);
  private MongoClient mongo = null;
  private int iCurrentTicket = 0;
  private boolean bDownloaded = false;
  private boolean bConnected = false;
  
  private void loadDocuments(int iMaxNumDoc, int iCurrentTicket) { 
    try {
      mongo = new MongoClient(uri);
      DB db = mongo.getDB("shadow_support");
      DBCollection collection = db.getCollection("support");
      
      DBCursor cursor = collection.find();
      
      if(cursor.count() > 0)
        tickets.clear();
      
      while(cursor.hasNext()) {
        BasicDBObject obj = (BasicDBObject)cursor.next();
        tickets.add(new Ticket(obj.getString("ticketid"),
                               obj.getString("problemreported"),
                               obj.getString("category"),
                               obj.getString("previousassigmentgroup"),
                               obj.getString("typeofsolution"),
                               obj.getString("stepstosolveit"),
                               obj.getString("averagehrstosolveit"),
                               obj.getString("scriptusedforsolution"),
                               obj.getString("solutionartifactshared"),
                               obj.getString("othersupportteams"),
                               obj.getString("resourcescontacted"),
                               obj.getString("escalationrequired"),
                               obj.getString("escalationprocess"),
                               obj.getString("changerequestneeded"),
                               obj.getDate("solveddate"),
                               obj.getDate("reporteddate"),
                               obj.getString("solvedby"),
                               obj.getBoolean("bIsNew"),
                               obj.getBoolean("bIsUpdated"),
                               obj.getBoolean("bIsDeleted")));
      }
      
      bDownloaded = true;
      this.iCurrentTicket = iCurrentTicket;
      showTicket(iCurrentTicket);
      stateControls(States.STATE_DOWNLOADED);
      JOptionPane.showMessageDialog(this, "Downloaded information of " + tickets.size() + " Tickets", "Info", JOptionPane.INFORMATION_MESSAGE, 
            new javax.swing.ImageIcon(getClass().getResource("/shadow_support/Download from the Cloud.png")));
      
    } catch (UnknownHostException ex) {
      Logger.getLogger(Frame.class.getName()).log(Level.SEVERE, null, ex);
    } finally{
      mongo.close();
    }    
  }    

     /**
     * Creates new form form
     */
    public Frame() {
      initComponents();
      this.setIconImage(new ImageIcon(getClass()
                    .getResource("/shadow_support/Customer Support.png")).getImage());
      
      Dimension dim = Toolkit.getDefaultToolkit().getScreenSize();
      setLocation(dim.width/2-this.getSize().width/2, dim.height/2-this.getSize().height/2);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
  // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
  private void initComponents() {

    buttonGroup1 = new javax.swing.ButtonGroup();
    buttonGroup2 = new javax.swing.ButtonGroup();
    jDialog1 = new javax.swing.JDialog();
    buttonGroup3 = new javax.swing.ButtonGroup();
    jTabContacts = new javax.swing.JTabbedPane();
    jPanel2 = new javax.swing.JPanel();
    jLabel3 = new javax.swing.JLabel();
    jLabel4 = new javax.swing.JLabel();
    jTicketid = new javax.swing.JTextField();
    jScrollPane2 = new javax.swing.JScrollPane();
    jProblemreported = new javax.swing.JTextArea();
    jLabel5 = new javax.swing.JLabel();
    jPreviousassigmentgroup = new javax.swing.JTextField();
    jLabel6 = new javax.swing.JLabel();
    jScrollPane4 = new javax.swing.JScrollPane();
    jTypeofsolution = new javax.swing.JTextArea();
    jLabel14 = new javax.swing.JLabel();
    jSolveddate = new javax.swing.JFormattedTextField();
    jLabel15 = new javax.swing.JLabel();
    jSolvedby = new javax.swing.JTextField();
    jLabel16 = new javax.swing.JLabel();
    jReporteddate = new javax.swing.JFormattedTextField();
    jLabel17 = new javax.swing.JLabel();
    jCategory = new javax.swing.JTextField();
    jPanel3 = new javax.swing.JPanel();
    jScrollPane1 = new javax.swing.JScrollPane();
    jStepstosolveit = new javax.swing.JTextArea();
    jLabel18 = new javax.swing.JLabel();
    jAveragehrs = new javax.swing.JSpinner();
    jPanel4 = new javax.swing.JPanel();
    jLabel7 = new javax.swing.JLabel();
    jScriptusedforsolution = new javax.swing.JTextField();
    jLabel8 = new javax.swing.JLabel();
    jSolutionartifactsharedSi = new javax.swing.JRadioButton();
    jSolutionartifactsharedNo = new javax.swing.JRadioButton();
    jSolutionartifactsharedNA = new javax.swing.JRadioButton();
    jPanel5 = new javax.swing.JPanel();
    jLabel9 = new javax.swing.JLabel();
    jScrollPane3 = new javax.swing.JScrollPane();
    jOthersupportteams = new javax.swing.JTextArea();
    jLabel10 = new javax.swing.JLabel();
    jScrollPane5 = new javax.swing.JScrollPane();
    jResourcescontacted = new javax.swing.JTextArea();
    jPanel6 = new javax.swing.JPanel();
    jLabel11 = new javax.swing.JLabel();
    jEscalationrequiredSi = new javax.swing.JRadioButton();
    jEscalationrequiredNo = new javax.swing.JRadioButton();
    jLabel12 = new javax.swing.JLabel();
    jScrollPane6 = new javax.swing.JScrollPane();
    jEscalationprocess = new javax.swing.JTextArea();
    jLabel13 = new javax.swing.JLabel();
    jChangerequestneededSi = new javax.swing.JRadioButton();
    jChangerequestneededNo = new javax.swing.JRadioButton();
    jToolBar2 = new javax.swing.JToolBar();
    jNew = new javax.swing.JButton();
    jSave = new javax.swing.JButton();
    jDuplicate = new javax.swing.JButton();
    jEdit = new javax.swing.JButton();
    jCancel = new javax.swing.JButton();
    jDelete = new javax.swing.JButton();
    jSeparator2 = new javax.swing.JToolBar.Separator();
    jRegEx = new javax.swing.JTextField();
    jWhere = new javax.swing.JComboBox<String>();
    jFind = new javax.swing.JButton();
    jSeparator5 = new javax.swing.JToolBar.Separator();
    jExport = new javax.swing.JButton();
    jDownload = new javax.swing.JButton();
    jSeparator1 = new javax.swing.JToolBar.Separator();
    jFirst = new javax.swing.JButton();
    jPrevious = new javax.swing.JButton();
    jNext = new javax.swing.JButton();
    jLast = new javax.swing.JButton();
    jConnect = new javax.swing.JButton();
    jRecords = new javax.swing.JLabel();
    jPanel1 = new javax.swing.JPanel();
    jLabel1 = new javax.swing.JLabel();
    jMenuBar1 = new javax.swing.JMenuBar();
    jHelp = new javax.swing.JMenu();
    jAbout = new javax.swing.JMenuItem();

    javax.swing.GroupLayout jDialog1Layout = new javax.swing.GroupLayout(jDialog1.getContentPane());
    jDialog1.getContentPane().setLayout(jDialog1Layout);
    jDialog1Layout.setHorizontalGroup(
      jDialog1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGap(0, 400, Short.MAX_VALUE)
    );
    jDialog1Layout.setVerticalGroup(
      jDialog1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGap(0, 300, Short.MAX_VALUE)
    );

    setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
    setTitle("Shadow support");

    jTabContacts.setBorder(javax.swing.BorderFactory.createEtchedBorder());

    jLabel3.setText("Ticket ID");

    jLabel4.setText("Problem Reported");

    jTicketid.setToolTipText("");
    jTicketid.setDisabledTextColor(java.awt.SystemColor.textInactiveText);
    jTicketid.setEnabled(false);

    jProblemreported.setColumns(20);
    jProblemreported.setRows(5);
    jProblemreported.setDisabledTextColor(java.awt.SystemColor.textInactiveText);
    jProblemreported.setEnabled(false);
    jScrollPane2.setViewportView(jProblemreported);

    jLabel5.setText("Previous Assignment Group ");

    jPreviousassigmentgroup.setDisabledTextColor(java.awt.SystemColor.textInactiveText);
    jPreviousassigmentgroup.setEnabled(false);
    jPreviousassigmentgroup.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        jPreviousassigmentgroupActionPerformed(evt);
      }
    });

    jLabel6.setText("Type of Solution ");

    jTypeofsolution.setColumns(20);
    jTypeofsolution.setRows(5);
    jTypeofsolution.setDisabledTextColor(java.awt.SystemColor.textInactiveText);
    jTypeofsolution.setEnabled(false);
    jScrollPane4.setViewportView(jTypeofsolution);

    jLabel14.setText("Solved Date");

    jSolveddate.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.DateFormatter(new java.text.SimpleDateFormat("d/M/yyyy"))));
    jSolveddate.setDisabledTextColor(java.awt.SystemColor.textInactiveText);
    jSolveddate.setEnabled(false);

    jLabel15.setText("Solved By");

    jSolvedby.setDisabledTextColor(java.awt.SystemColor.textInactiveText);
    jSolvedby.setEnabled(false);

    jLabel16.setText("Reported Date");

    jReporteddate.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.DateFormatter(new java.text.SimpleDateFormat("d/M/yyyy"))));
    jReporteddate.setDisabledTextColor(java.awt.SystemColor.textInactiveText);
    jReporteddate.setEnabled(false);

    jLabel17.setText("Category");

    jCategory.setDisabledTextColor(java.awt.SystemColor.textInactiveText);
    jCategory.setEnabled(false);
    jCategory.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        jCategoryActionPerformed(evt);
      }
    });

    javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
    jPanel2.setLayout(jPanel2Layout);
    jPanel2Layout.setHorizontalGroup(
      jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(jPanel2Layout.createSequentialGroup()
        .addGap(33, 33, 33)
        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
          .addGroup(jPanel2Layout.createSequentialGroup()
            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
              .addComponent(jLabel16, javax.swing.GroupLayout.Alignment.TRAILING)
              .addComponent(jLabel5, javax.swing.GroupLayout.Alignment.TRAILING))
            .addGap(18, 18, 18)
            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
              .addComponent(jReporteddate, javax.swing.GroupLayout.PREFERRED_SIZE, 218, javax.swing.GroupLayout.PREFERRED_SIZE)
              .addComponent(jPreviousassigmentgroup, javax.swing.GroupLayout.PREFERRED_SIZE, 576, javax.swing.GroupLayout.PREFERRED_SIZE)))
          .addGroup(jPanel2Layout.createSequentialGroup()
            .addComponent(jLabel17)
            .addGap(18, 18, 18)
            .addComponent(jCategory, javax.swing.GroupLayout.PREFERRED_SIZE, 576, javax.swing.GroupLayout.PREFERRED_SIZE))
          .addGroup(jPanel2Layout.createSequentialGroup()
            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
              .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(67, 67, 67)
                .addComponent(jLabel6)
                .addGap(18, 18, 18))
              .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                  .addComponent(jLabel14, javax.swing.GroupLayout.Alignment.TRAILING)
                  .addComponent(jLabel15, javax.swing.GroupLayout.Alignment.TRAILING))
                .addGap(18, 18, 18)))
            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
              .addComponent(jSolveddate, javax.swing.GroupLayout.PREFERRED_SIZE, 218, javax.swing.GroupLayout.PREFERRED_SIZE)
              .addComponent(jSolvedby, javax.swing.GroupLayout.PREFERRED_SIZE, 218, javax.swing.GroupLayout.PREFERRED_SIZE)
              .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 576, javax.swing.GroupLayout.PREFERRED_SIZE)))
          .addGroup(jPanel2Layout.createSequentialGroup()
            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
              .addComponent(jLabel4, javax.swing.GroupLayout.Alignment.TRAILING)
              .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.TRAILING))
            .addGap(18, 18, 18)
            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
              .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 576, Short.MAX_VALUE)
              .addComponent(jTicketid))))
        .addContainerGap(503, Short.MAX_VALUE))
    );
    jPanel2Layout.setVerticalGroup(
      jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(jPanel2Layout.createSequentialGroup()
        .addGap(21, 21, 21)
        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
          .addComponent(jTicketid, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
          .addComponent(jLabel3))
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
          .addComponent(jLabel4)
          .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
          .addComponent(jCategory, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
          .addComponent(jLabel17))
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
          .addComponent(jReporteddate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
          .addComponent(jLabel16))
        .addGap(14, 14, 14)
        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
          .addComponent(jPreviousassigmentgroup, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
          .addComponent(jLabel5))
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
          .addComponent(jLabel6)
          .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
          .addComponent(jSolveddate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
          .addComponent(jLabel14))
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
          .addComponent(jSolvedby, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
          .addComponent(jLabel15))
        .addContainerGap(18, Short.MAX_VALUE))
    );

    jTabContacts.addTab("General Info", jPanel2);

    jStepstosolveit.setColumns(20);
    jStepstosolveit.setRows(5);
    jStepstosolveit.setDisabledTextColor(java.awt.SystemColor.textInactiveText);
    jStepstosolveit.setEnabled(false);
    jScrollPane1.setViewportView(jStepstosolveit);

    jLabel18.setText("Average hrs to solve it");

    jAveragehrs.setModel(new javax.swing.SpinnerNumberModel(1, 1, null, 1));
    jAveragehrs.setToolTipText("");
    jAveragehrs.setEnabled(false);

    javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
    jPanel3.setLayout(jPanel3Layout);
    jPanel3Layout.setHorizontalGroup(
      jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(jPanel3Layout.createSequentialGroup()
        .addContainerGap()
        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
          .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 1275, Short.MAX_VALUE)
          .addGroup(jPanel3Layout.createSequentialGroup()
            .addGap(6, 6, 6)
            .addComponent(jLabel18)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
            .addComponent(jAveragehrs, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addGap(0, 0, Short.MAX_VALUE)))
        .addContainerGap())
    );
    jPanel3Layout.setVerticalGroup(
      jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(jPanel3Layout.createSequentialGroup()
        .addContainerGap()
        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 417, javax.swing.GroupLayout.PREFERRED_SIZE)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
          .addComponent(jLabel18)
          .addComponent(jAveragehrs, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        .addContainerGap(26, Short.MAX_VALUE))
    );

    jTabContacts.addTab("Steps to solve it", jPanel3);

    jLabel7.setText("Script, Query or Tool used for Solution (Solution artifact) ");

    jScriptusedforsolution.setDisabledTextColor(java.awt.SystemColor.textInactiveText);
    jScriptusedforsolution.setEnabled(false);

    jLabel8.setText("Solution Artifact shared? ");

    buttonGroup1.add(jSolutionartifactsharedSi);
    jSolutionartifactsharedSi.setText("Yes");
    jSolutionartifactsharedSi.setToolTipText("");
    jSolutionartifactsharedSi.setEnabled(false);
    jSolutionartifactsharedSi.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        jSolutionartifactsharedSiActionPerformed(evt);
      }
    });

    buttonGroup1.add(jSolutionartifactsharedNo);
    jSolutionartifactsharedNo.setText("No");
    jSolutionartifactsharedNo.setEnabled(false);
    jSolutionartifactsharedNo.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        jSolutionartifactsharedNoActionPerformed(evt);
      }
    });

    buttonGroup1.add(jSolutionartifactsharedNA);
    jSolutionartifactsharedNA.setText("N/A");
    jSolutionartifactsharedNA.setEnabled(false);
    jSolutionartifactsharedNA.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        jSolutionartifactsharedNAActionPerformed(evt);
      }
    });

    javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
    jPanel4.setLayout(jPanel4Layout);
    jPanel4Layout.setHorizontalGroup(
      jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(jPanel4Layout.createSequentialGroup()
        .addContainerGap()
        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
          .addComponent(jLabel8)
          .addComponent(jLabel7))
        .addGap(9, 9, 9)
        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
          .addComponent(jScriptusedforsolution)
          .addGroup(jPanel4Layout.createSequentialGroup()
            .addComponent(jSolutionartifactsharedSi)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
            .addComponent(jSolutionartifactsharedNo)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
            .addComponent(jSolutionartifactsharedNA)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 698, Short.MAX_VALUE)))
        .addGap(124, 124, 124))
    );
    jPanel4Layout.setVerticalGroup(
      jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(jPanel4Layout.createSequentialGroup()
        .addGap(24, 24, 24)
        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
          .addComponent(jLabel7)
          .addComponent(jScriptusedforsolution, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        .addGap(18, 18, 18)
        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
          .addComponent(jLabel8)
          .addComponent(jSolutionartifactsharedSi)
          .addComponent(jSolutionartifactsharedNo)
          .addComponent(jSolutionartifactsharedNA))
        .addContainerGap(401, Short.MAX_VALUE))
    );

    jLabel7.getAccessibleContext().setAccessibleDescription("");

    jTabContacts.addTab("Script used", jPanel4);

    jLabel9.setText("Other Support Teams contacted ");

    jOthersupportteams.setColumns(20);
    jOthersupportteams.setRows(5);
    jOthersupportteams.setDisabledTextColor(java.awt.SystemColor.textInactiveText);
    jOthersupportteams.setEnabled(false);
    jScrollPane3.setViewportView(jOthersupportteams);

    jLabel10.setText("Grupo Bimbo resources contacted ");

    jResourcescontacted.setColumns(20);
    jResourcescontacted.setRows(5);
    jResourcescontacted.setDisabledTextColor(java.awt.SystemColor.textInactiveText);
    jResourcescontacted.setEnabled(false);
    jScrollPane5.setViewportView(jResourcescontacted);

    javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
    jPanel5.setLayout(jPanel5Layout);
    jPanel5Layout.setHorizontalGroup(
      jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(jPanel5Layout.createSequentialGroup()
        .addGap(17, 17, 17)
        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
          .addComponent(jLabel10)
          .addComponent(jLabel9, javax.swing.GroupLayout.Alignment.TRAILING))
        .addGap(18, 18, 18)
        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
          .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 897, Short.MAX_VALUE)
          .addComponent(jScrollPane5))
        .addGap(164, 164, 164))
    );
    jPanel5Layout.setVerticalGroup(
      jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(jPanel5Layout.createSequentialGroup()
        .addGap(29, 29, 29)
        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
          .addComponent(jLabel9)
          .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
          .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
          .addComponent(jLabel10))
        .addContainerGap(252, Short.MAX_VALUE))
    );

    jTabContacts.addTab("Contacts Info", jPanel5);

    jLabel11.setText("Escalation required? ");

    buttonGroup2.add(jEscalationrequiredSi);
    jEscalationrequiredSi.setText("Yes");
    jEscalationrequiredSi.setEnabled(false);
    jEscalationrequiredSi.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        jEscalationrequiredSiActionPerformed(evt);
      }
    });

    buttonGroup2.add(jEscalationrequiredNo);
    jEscalationrequiredNo.setText("No");
    jEscalationrequiredNo.setEnabled(false);
    jEscalationrequiredNo.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        jEscalationrequiredNoActionPerformed(evt);
      }
    });

    jLabel12.setText("Escalation process applied ");

    jEscalationprocess.setColumns(20);
    jEscalationprocess.setRows(5);
    jEscalationprocess.setDisabledTextColor(java.awt.SystemColor.textInactiveText);
    jEscalationprocess.setEnabled(false);
    jScrollPane6.setViewportView(jEscalationprocess);

    jLabel13.setText("Change Request needed? ");

    buttonGroup3.add(jChangerequestneededSi);
    jChangerequestneededSi.setText("Yes");
    jChangerequestneededSi.setEnabled(false);

    buttonGroup3.add(jChangerequestneededNo);
    jChangerequestneededNo.setText("No");
    jChangerequestneededNo.setEnabled(false);

    javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
    jPanel6.setLayout(jPanel6Layout);
    jPanel6Layout.setHorizontalGroup(
      jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(jPanel6Layout.createSequentialGroup()
        .addGap(44, 44, 44)
        .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
          .addComponent(jLabel11)
          .addComponent(jLabel12))
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
        .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
          .addGroup(jPanel6Layout.createSequentialGroup()
            .addComponent(jEscalationrequiredSi)
            .addGap(18, 18, 18)
            .addComponent(jEscalationrequiredNo)
            .addGap(979, 979, 979))
          .addGroup(jPanel6Layout.createSequentialGroup()
            .addComponent(jScrollPane6)
            .addGap(306, 306, 306))))
      .addGroup(jPanel6Layout.createSequentialGroup()
        .addGap(52, 52, 52)
        .addComponent(jLabel13)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
        .addComponent(jChangerequestneededSi)
        .addGap(18, 18, 18)
        .addComponent(jChangerequestneededNo)
        .addGap(0, 0, Short.MAX_VALUE))
    );
    jPanel6Layout.setVerticalGroup(
      jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(jPanel6Layout.createSequentialGroup()
        .addGap(25, 25, 25)
        .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
          .addComponent(jLabel11)
          .addComponent(jEscalationrequiredSi)
          .addComponent(jEscalationrequiredNo))
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
        .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
          .addComponent(jLabel12)
          .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
        .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
          .addComponent(jChangerequestneededNo)
          .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
            .addComponent(jLabel13)
            .addComponent(jChangerequestneededSi)))
        .addContainerGap(306, Short.MAX_VALUE))
    );

    jTabContacts.addTab("Escalation", jPanel6);

    jToolBar2.setBorder(javax.swing.BorderFactory.createEtchedBorder());
    jToolBar2.setFloatable(false);
    jToolBar2.setRollover(true);

    jNew.setIcon(new javax.swing.ImageIcon(getClass().getResource("/shadow_support/Document.png"))); // NOI18N
    jNew.setToolTipText("New");
    jNew.setEnabled(false);
    jNew.setFocusable(false);
    jNew.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
    jNew.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
    jNew.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        jNewActionPerformed(evt);
      }
    });
    jToolBar2.add(jNew);

    jSave.setIcon(new javax.swing.ImageIcon(getClass().getResource("/shadow_support/Save.png"))); // NOI18N
    jSave.setToolTipText("Save");
    jSave.setEnabled(false);
    jSave.setFocusable(false);
    jSave.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
    jSave.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
    jSave.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        jSaveActionPerformed(evt);
      }
    });
    jToolBar2.add(jSave);

    jDuplicate.setIcon(new javax.swing.ImageIcon(getClass().getResource("/shadow_support/Copy.png"))); // NOI18N
    jDuplicate.setToolTipText("Duplicate");
    jDuplicate.setEnabled(false);
    jDuplicate.setFocusable(false);
    jDuplicate.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
    jDuplicate.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
    jDuplicate.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        jDuplicateActionPerformed(evt);
      }
    });
    jToolBar2.add(jDuplicate);

    jEdit.setIcon(new javax.swing.ImageIcon(getClass().getResource("/shadow_support/Edit.png"))); // NOI18N
    jEdit.setToolTipText("Edit");
    jEdit.setEnabled(false);
    jEdit.setFocusable(false);
    jEdit.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
    jEdit.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
    jEdit.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        jEditActionPerformed(evt);
      }
    });
    jToolBar2.add(jEdit);

    jCancel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/shadow_support/Cancel.png"))); // NOI18N
    jCancel.setToolTipText("Cancel");
    jCancel.setEnabled(false);
    jCancel.setFocusable(false);
    jCancel.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
    jCancel.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
    jCancel.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        jCancelActionPerformed(evt);
      }
    });
    jToolBar2.add(jCancel);

    jDelete.setIcon(new javax.swing.ImageIcon(getClass().getResource("/shadow_support/Delete.png"))); // NOI18N
    jDelete.setToolTipText("Delete");
    jDelete.setEnabled(false);
    jDelete.setFocusable(false);
    jDelete.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
    jDelete.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
    jDelete.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        jDeleteActionPerformed(evt);
      }
    });
    jToolBar2.add(jDelete);
    jToolBar2.add(jSeparator2);

    jRegEx.setToolTipText("Text (RegEx) to search");
    jRegEx.setEnabled(false);
    jRegEx.addKeyListener(new java.awt.event.KeyAdapter() {
      public void keyPressed(java.awt.event.KeyEvent evt) {
        jRegExKeyPressed(evt);
      }
    });
    jToolBar2.add(jRegEx);

    jWhere.setModel(new javax.swing.DefaultComboBoxModel<String>(new String[] { "Search in...", "-", "Ticket ID", "Problem reported", "Category", "Reported date", "Previous assigment group", "Type of solution", "Solved date", "Solved by", "Steps to solve it", "Script used for solution", "Other support teams", "Resources contacted", "Escalation process" }));
    jWhere.setToolTipText("Search in...");
    jWhere.setEnabled(false);
    jWhere.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        jWhereActionPerformed(evt);
      }
    });
    jToolBar2.add(jWhere);

    jFind.setIcon(new javax.swing.ImageIcon(getClass().getResource("/shadow_support/Search.png"))); // NOI18N
    jFind.setToolTipText("Search");
    jFind.setEnabled(false);
    jFind.setFocusable(false);
    jFind.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
    jFind.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
    jFind.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        jFindActionPerformed(evt);
      }
    });
    jToolBar2.add(jFind);
    jToolBar2.add(jSeparator5);

    jExport.setIcon(new javax.swing.ImageIcon(getClass().getResource("/shadow_support/Export.png"))); // NOI18N
    jExport.setToolTipText("Export to Excel");
    jExport.setEnabled(false);
    jExport.setFocusable(false);
    jExport.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
    jExport.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
    jExport.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        jExportActionPerformed(evt);
      }
    });
    jToolBar2.add(jExport);

    jDownload.setIcon(new javax.swing.ImageIcon(getClass().getResource("/shadow_support/Download from the Cloud.png"))); // NOI18N
    jDownload.setToolTipText("Download all Tickets");
    jDownload.setEnabled(false);
    jDownload.setFocusable(false);
    jDownload.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
    jDownload.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
    jDownload.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        jDownloadActionPerformed(evt);
      }
    });
    jToolBar2.add(jDownload);
    jToolBar2.add(jSeparator1);

    jFirst.setIcon(new javax.swing.ImageIcon(getClass().getResource("/shadow_support/Previous.png"))); // NOI18N
    jFirst.setToolTipText("First");
    jFirst.setEnabled(false);
    jFirst.setFocusable(false);
    jFirst.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
    jFirst.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
    jFirst.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        jFirstActionPerformed(evt);
      }
    });
    jToolBar2.add(jFirst);

    jPrevious.setIcon(new javax.swing.ImageIcon(getClass().getResource("/shadow_support/Previous.png"))); // NOI18N
    jPrevious.setToolTipText("Previous");
    jPrevious.setEnabled(false);
    jPrevious.setFocusable(false);
    jPrevious.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
    jPrevious.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
    jPrevious.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        jPreviousActionPerformed(evt);
      }
    });
    jToolBar2.add(jPrevious);

    jNext.setIcon(new javax.swing.ImageIcon(getClass().getResource("/shadow_support/Next.png"))); // NOI18N
    jNext.setToolTipText("Next");
    jNext.setEnabled(false);
    jNext.setFocusable(false);
    jNext.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
    jNext.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
    jNext.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        jNextActionPerformed(evt);
      }
    });
    jToolBar2.add(jNext);

    jLast.setIcon(new javax.swing.ImageIcon(getClass().getResource("/shadow_support/Next.png"))); // NOI18N
    jLast.setToolTipText("Last");
    jLast.setEnabled(false);
    jLast.setFocusable(false);
    jLast.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
    jLast.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
    jLast.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        jLastActionPerformed(evt);
      }
    });
    jToolBar2.add(jLast);

    jConnect.setIcon(new javax.swing.ImageIcon(getClass().getResource("/shadow_support/Disconnected.png"))); // NOI18N
    jConnect.setToolTipText("Connect to DB Tickets");
    jConnect.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        jConnectActionPerformed(evt);
      }
    });

    jRecords.setText("( - of - Registers)");
    jRecords.setEnabled(false);

    jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());

    jLabel1.setFont(new java.awt.Font("sansserif", 0, 10)); // NOI18N
    jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/shadow_support/Disconnected16.png"))); // NOI18N
    jLabel1.setText("Disconnected");

    javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
    jPanel1.setLayout(jPanel1Layout);
    jPanel1Layout.setHorizontalGroup(
      jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        .addComponent(jLabel1)
        .addContainerGap())
    );
    jPanel1Layout.setVerticalGroup(
      jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addComponent(jLabel1)
    );

    jHelp.setText("Help");

    jAbout.setText("About...");
    jAbout.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        jAboutActionPerformed(evt);
      }
    });
    jHelp.add(jAbout);

    jMenuBar1.add(jHelp);

    setJMenuBar(jMenuBar1);

    javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
    getContentPane().setLayout(layout);
    layout.setHorizontalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(layout.createSequentialGroup()
        .addContainerGap()
        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
          .addComponent(jTabContacts)
          .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
          .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
            .addComponent(jToolBar2, javax.swing.GroupLayout.PREFERRED_SIZE, 986, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addGap(63, 63, 63)
            .addComponent(jRecords)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jConnect)))
        .addContainerGap())
    );
    layout.setVerticalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(layout.createSequentialGroup()
        .addContainerGap()
        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
          .addComponent(jToolBar2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
          .addComponent(jConnect, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
          .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
            .addComponent(jRecords)
            .addGap(14, 14, 14)))
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
        .addComponent(jTabContacts, javax.swing.GroupLayout.PREFERRED_SIZE, 523, javax.swing.GroupLayout.PREFERRED_SIZE)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
    );

    jTabContacts.getAccessibleContext().setAccessibleName("");
    jTabContacts.getAccessibleContext().setAccessibleDescription("");

    pack();
  }// </editor-fold>//GEN-END:initComponents

  private void jPreviousassigmentgroupActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jPreviousassigmentgroupActionPerformed
    
  }//GEN-LAST:event_jPreviousassigmentgroupActionPerformed

  private void jNewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jNewActionPerformed
    newDocument();
  }//GEN-LAST:event_jNewActionPerformed

  private void jSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jSaveActionPerformed
    saveDocument();
  }//GEN-LAST:event_jSaveActionPerformed

  private void jDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jDeleteActionPerformed
    deleteDocument();
  }//GEN-LAST:event_jDeleteActionPerformed

  private void jFirstActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jFirstActionPerformed
    firstDocument();
  }//GEN-LAST:event_jFirstActionPerformed

  private void jPreviousActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jPreviousActionPerformed
    previousDocument();
  }//GEN-LAST:event_jPreviousActionPerformed

  private void jNextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jNextActionPerformed
    nextDocument();
  }//GEN-LAST:event_jNextActionPerformed

  private void jLastActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jLastActionPerformed
    lastDocument();
  }//GEN-LAST:event_jLastActionPerformed

  private void jEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jEditActionPerformed
    editDocument();
  }//GEN-LAST:event_jEditActionPerformed

  private void jCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCancelActionPerformed
    cancel();
  }//GEN-LAST:event_jCancelActionPerformed

  private void jConnectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jConnectActionPerformed
    connect();
  }//GEN-LAST:event_jConnectActionPerformed

  private void jExportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jExportActionPerformed
    export();
  }//GEN-LAST:event_jExportActionPerformed

  private void jCategoryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCategoryActionPerformed
    // TODO add your handling code here:
  }//GEN-LAST:event_jCategoryActionPerformed

  private void jDuplicateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jDuplicateActionPerformed
    duplicate();
  }//GEN-LAST:event_jDuplicateActionPerformed

  private void jRegExKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jRegExKeyPressed
    if(evt.getKeyCode()==KeyEvent.VK_ENTER)
      find();
  }//GEN-LAST:event_jRegExKeyPressed

  private void jAboutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jAboutActionPerformed
    JOptionPane.showMessageDialog(this, "   adrian.gallardo@capgemini.com\n   December 2016\n\n", "About", JOptionPane.INFORMATION_MESSAGE, 
            new javax.swing.ImageIcon(getClass().getResource("/shadow_support/Form.png"))); 
  }//GEN-LAST:event_jAboutActionPerformed

  private void jEscalationrequiredNoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jEscalationrequiredNoActionPerformed
    jEscalationprocess.setText("");
    jEscalationprocess.setEnabled(false);
  }//GEN-LAST:event_jEscalationrequiredNoActionPerformed

  private void jEscalationrequiredSiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jEscalationrequiredSiActionPerformed
    jEscalationprocess.setEnabled(true);
  }//GEN-LAST:event_jEscalationrequiredSiActionPerformed

  private void jSolutionartifactsharedNAActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jSolutionartifactsharedNAActionPerformed
    jScriptusedforsolution.setText("");
    jScriptusedforsolution.setEnabled(false);
  }//GEN-LAST:event_jSolutionartifactsharedNAActionPerformed

  private void jSolutionartifactsharedSiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jSolutionartifactsharedSiActionPerformed
    jScriptusedforsolution.setEnabled(true);
  }//GEN-LAST:event_jSolutionartifactsharedSiActionPerformed

  private void jSolutionartifactsharedNoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jSolutionartifactsharedNoActionPerformed
    jScriptusedforsolution.setEnabled(true);
  }//GEN-LAST:event_jSolutionartifactsharedNoActionPerformed

  private void jDownloadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jDownloadActionPerformed
    loadDocuments(1000, iCurrentTicket);
  }//GEN-LAST:event_jDownloadActionPerformed

  private void jFindActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jFindActionPerformed
    find();
  }//GEN-LAST:event_jFindActionPerformed

  private void jWhereActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jWhereActionPerformed
    // TODO add your handling code here:
  }//GEN-LAST:event_jWhereActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]){        
      java.awt.EventQueue.invokeLater(new Runnable() {
        @Override
        public void run() {
          Frame ventana = new Frame();  
          ventana.setVisible(true);
        }
      });
    }

  // Variables declaration - do not modify//GEN-BEGIN:variables
  private javax.swing.ButtonGroup buttonGroup1;
  private javax.swing.ButtonGroup buttonGroup2;
  private javax.swing.ButtonGroup buttonGroup3;
  private javax.swing.JMenuItem jAbout;
  private javax.swing.JSpinner jAveragehrs;
  private javax.swing.JButton jCancel;
  private javax.swing.JTextField jCategory;
  private javax.swing.JRadioButton jChangerequestneededNo;
  private javax.swing.JRadioButton jChangerequestneededSi;
  private javax.swing.JButton jConnect;
  private javax.swing.JButton jDelete;
  private javax.swing.JDialog jDialog1;
  private javax.swing.JButton jDownload;
  private javax.swing.JButton jDuplicate;
  private javax.swing.JButton jEdit;
  private javax.swing.JTextArea jEscalationprocess;
  private javax.swing.JRadioButton jEscalationrequiredNo;
  private javax.swing.JRadioButton jEscalationrequiredSi;
  private javax.swing.JButton jExport;
  private javax.swing.JButton jFind;
  private javax.swing.JButton jFirst;
  private javax.swing.JMenu jHelp;
  private javax.swing.JLabel jLabel1;
  private javax.swing.JLabel jLabel10;
  private javax.swing.JLabel jLabel11;
  private javax.swing.JLabel jLabel12;
  private javax.swing.JLabel jLabel13;
  private javax.swing.JLabel jLabel14;
  private javax.swing.JLabel jLabel15;
  private javax.swing.JLabel jLabel16;
  private javax.swing.JLabel jLabel17;
  private javax.swing.JLabel jLabel18;
  private javax.swing.JLabel jLabel3;
  private javax.swing.JLabel jLabel4;
  private javax.swing.JLabel jLabel5;
  private javax.swing.JLabel jLabel6;
  private javax.swing.JLabel jLabel7;
  private javax.swing.JLabel jLabel8;
  private javax.swing.JLabel jLabel9;
  private javax.swing.JButton jLast;
  private javax.swing.JMenuBar jMenuBar1;
  private javax.swing.JButton jNew;
  private javax.swing.JButton jNext;
  private javax.swing.JTextArea jOthersupportteams;
  private javax.swing.JPanel jPanel1;
  private javax.swing.JPanel jPanel2;
  private javax.swing.JPanel jPanel3;
  private javax.swing.JPanel jPanel4;
  private javax.swing.JPanel jPanel5;
  private javax.swing.JPanel jPanel6;
  private javax.swing.JButton jPrevious;
  private javax.swing.JTextField jPreviousassigmentgroup;
  private javax.swing.JTextArea jProblemreported;
  private javax.swing.JLabel jRecords;
  private javax.swing.JTextField jRegEx;
  private javax.swing.JFormattedTextField jReporteddate;
  private javax.swing.JTextArea jResourcescontacted;
  private javax.swing.JButton jSave;
  private javax.swing.JTextField jScriptusedforsolution;
  private javax.swing.JScrollPane jScrollPane1;
  private javax.swing.JScrollPane jScrollPane2;
  private javax.swing.JScrollPane jScrollPane3;
  private javax.swing.JScrollPane jScrollPane4;
  private javax.swing.JScrollPane jScrollPane5;
  private javax.swing.JScrollPane jScrollPane6;
  private javax.swing.JToolBar.Separator jSeparator1;
  private javax.swing.JToolBar.Separator jSeparator2;
  private javax.swing.JToolBar.Separator jSeparator5;
  private javax.swing.JRadioButton jSolutionartifactsharedNA;
  private javax.swing.JRadioButton jSolutionartifactsharedNo;
  private javax.swing.JRadioButton jSolutionartifactsharedSi;
  private javax.swing.JTextField jSolvedby;
  private javax.swing.JFormattedTextField jSolveddate;
  private javax.swing.JTextArea jStepstosolveit;
  private javax.swing.JTabbedPane jTabContacts;
  private javax.swing.JTextField jTicketid;
  private javax.swing.JToolBar jToolBar2;
  private javax.swing.JTextArea jTypeofsolution;
  private javax.swing.JComboBox<String> jWhere;
  // End of variables declaration//GEN-END:variables

  private void saveDocument() {    
    boolean exception = false;
    
    String sTicketid;
    String sProblemreported;
    String sCategory;
    String sPreviousassigmentgroup;
    String sTypeofsolution;
    String sStepstosolveit;
    String sAveragehrstosolveit;
    String sScriptusedforsolution;
    String sSolutionartifactshared;
    String sOthersupportteams;
    String sResourcescontacted;
    String sEscalationrequired;
    String sEscalationprocess;
    String sChangerequestneeded;
    Date dSolveddate = null;
    Date dReporteddate = null;
    String sSolvedby;

    SimpleDateFormat formatter = new SimpleDateFormat("dd/MM/yyyy");

    try {
      dSolveddate = formatter.parse(jSolveddate.getText());
      dReporteddate = formatter.parse(jSolveddate.getText());
    } catch (ParseException e) {
    } 

    sTicketid = jTicketid.getText().trim();
    sProblemreported = jProblemreported.getText().trim();
    sCategory = jCategory.getText().trim();
    sPreviousassigmentgroup = jPreviousassigmentgroup.getText().trim();
    sTypeofsolution = jTypeofsolution.getText().trim();
    sStepstosolveit = jStepstosolveit.getText().trim();
    sAveragehrstosolveit = jAveragehrs.getValue().toString();
    sScriptusedforsolution = jScriptusedforsolution.getText().trim();
    if(jSolutionartifactsharedNA.isSelected()){
      sSolutionartifactshared = "N/A";
    }else{
      sSolutionartifactshared = (jSolutionartifactsharedSi.isSelected())? "Yes":"No"; 
    }    
    sOthersupportteams = jOthersupportteams.getText().trim();
    sResourcescontacted = jResourcescontacted.getText().trim();
    sEscalationrequired = (jEscalationrequiredSi.isSelected())? "Yes":"No";
    sEscalationprocess = jEscalationprocess.getText().trim();
    sChangerequestneeded = (jChangerequestneededSi.isSelected())? "Yes":"No";
    sSolvedby = jSolvedby.getText().trim();
    
    if(sTicketid.equals("")){
      JOptionPane.showMessageDialog(this, "Please enter the Ticket ID", "Info", JOptionPane.ERROR_MESSAGE, 
            new javax.swing.ImageIcon(getClass().getResource("/shadow_support/Error.png")));     
      jTicketid.requestFocus();
      
    }else{
      boolean update = false;
      try {
        mongo = new MongoClient(uri);
        DB db = mongo.getDB("shadow_support");
        DBCollection collection = db.getCollection("support");      

        BasicDBObject searchDocument = new BasicDBObject().append("ticketid", sTicketid);
        BasicDBObject document = new BasicDBObject();
        
        DBCursor cursor = collection.find(searchDocument, document);
        if(cursor.hasNext())
          update = true;
        
        document.put("ticketid", sTicketid);
        document.put("problemreported", sProblemreported);
        document.put("category", sCategory);
        document.put("previousassigmentgroup", sPreviousassigmentgroup);
        document.put("typeofsolution", sTypeofsolution);
        document.put("stepstosolveit", sStepstosolveit);
        document.put("averagehrstosolveit", sAveragehrstosolveit);
        document.put("scriptusedforsolution", sScriptusedforsolution);
        document.put("solutionartifactshared", sSolutionartifactshared);
        document.put("othersupportteams", sOthersupportteams);
        document.put("resourcescontacted", sResourcescontacted);
        document.put("escalationrequired", sEscalationrequired);
        document.put("escalationprocess", sEscalationprocess);
        document.put("changerequestneeded", sChangerequestneeded);
        document.put("solveddate", dSolveddate);
        document.put("reporteddate", dReporteddate);
        document.put("solvedby", sSolvedby);    

        collection.update(searchDocument, document, true, false);

      } catch (UnknownHostException ex) {
        exception = true;
        Logger.getLogger(Frame.class.getName()).log(Level.SEVERE, null, ex);
      } finally{
        mongo.close();
      }

      if(!exception){
        JOptionPane.showMessageDialog(this, "The Ticket info has been saved\n\n", "Info", JOptionPane.INFORMATION_MESSAGE, 
              new javax.swing.ImageIcon(getClass().getResource("/shadow_support/Save Close.png")));
        if(!update){
          tickets.add(new Ticket(sTicketid, sProblemreported, sCategory, sPreviousassigmentgroup, 
                                 sTypeofsolution, sStepstosolveit, sAveragehrstosolveit, 
                                 sScriptusedforsolution, sSolutionartifactshared, sOthersupportteams,
                                 sResourcescontacted, sEscalationrequired, sEscalationprocess,
                                 sChangerequestneeded, dSolveddate, dReporteddate, sSolvedby,
                                 true, false, false));
          showTicket(++iCurrentTicket);
        }else{
          for(int i=0; i<tickets.size(); i++){
            if(tickets.get(i).getTicketid().equals(sTicketid)){
              tickets.get(i).setTicketid(sTicketid);
              tickets.get(i).setProblemreported(sProblemreported);
              tickets.get(i).setCategory(sCategory);
              tickets.get(i).setPreviousassigmentgroup(sPreviousassigmentgroup);
              tickets.get(i).setTypeofsolution(sTypeofsolution);
              tickets.get(i).setAveragehrstosolveit(sAveragehrstosolveit);
              tickets.get(i).setStepstosolveit(sStepstosolveit);
              tickets.get(i).setScriptusedforsolution(sScriptusedforsolution);
              tickets.get(i).setSolutionartifactshared(sSolutionartifactshared);
              tickets.get(i).setOthersupportteams(sOthersupportteams);
              tickets.get(i).setResourcescontacted(sResourcescontacted);
              tickets.get(i).setEscalationrequired(sEscalationrequired);
              tickets.get(i).setEscalationprocess(sEscalationprocess);
              tickets.get(i).setChangerequestneeded(sChangerequestneeded);
              tickets.get(i).setSolveddate(dSolveddate);
              tickets.get(i).setReporteddate(dReporteddate);
              tickets.get(i).setSolvedby(sSolvedby);                      
            }
          }
          showTicket(iCurrentTicket);
        }
        stateControls(States.STATE_RELOADED);
      }else{
        JOptionPane.showMessageDialog(this, "Connection ERROR. Can't save the Ticket Info", "Info", JOptionPane.ERROR_MESSAGE, 
              new javax.swing.ImageIcon(getClass().getResource("/shadow_support/Disconnected.png")));
      }
    }
  }  

  private void deleteDocument() {
    int iRes = JOptionPane.showConfirmDialog(this, "The Ticket info will be deleted.\n\n ¿Do you want to proceed?\n\n", "Info", JOptionPane.OK_CANCEL_OPTION,
            JOptionPane.QUESTION_MESSAGE, new javax.swing.ImageIcon(getClass().getResource("/shadow_support/Help.png")));
    
    if(iRes==JOptionPane.OK_OPTION){
      boolean exception = false;

      try {
        mongo = new MongoClient(uri);
        DB db = mongo.getDB("shadow_support");
        DBCollection collection = db.getCollection("support");

        BasicDBObject searchQuery = new BasicDBObject();
        searchQuery.put("ticketid", jTicketid.getText());

        collection.remove(searchQuery);
      } catch (UnknownHostException ex) {
        Logger.getLogger(Frame.class.getName()).log(Level.SEVERE, null, ex);
      } finally{
        mongo.close();
      }

      if(!exception){
        tickets.remove(iCurrentTicket);
        JOptionPane.showMessageDialog(this, "The Ticket info has been deleted\n\n", "Info", JOptionPane.INFORMATION_MESSAGE, 
              new javax.swing.ImageIcon(getClass().getResource("/shadow_support/Delete.png")));
        
        showTicket((iCurrentTicket>0)?--iCurrentTicket:iCurrentTicket);
        stateControls(States.STATE_RELOADED);
      }else{
        JOptionPane.showMessageDialog(this, "Connection ERROR. Can't delete the Ticket Info\n\n", "Info", JOptionPane.ERROR_MESSAGE, 
              new javax.swing.ImageIcon(getClass().getResource("/shadow_support/Disconnected.png")));
      }      
    }
  }

  private void firstDocument() {
    iCurrentTicket = 0;
    showTicket(iCurrentTicket);
    stateControls(States.STATE_MOVED);
  }

  private void previousDocument() {
    showTicket(--iCurrentTicket);
    stateControls(States.STATE_MOVED);
  }

  private void nextDocument() {
    showTicket(++iCurrentTicket);
    stateControls(States.STATE_MOVED);
  }

  private void lastDocument() {
    iCurrentTicket = tickets.size() - 1;
    showTicket(iCurrentTicket);
    stateControls(States.STATE_MOVED);
  }

  private void newDocument() {
    stateControls(States.STATE_NEWED);
  }

  private void editDocument() {
    stateControls(States.STATE_UPDATED);
  }

  private void find() {
    ArrayList<Ticket> ticketsthatmatch = new ArrayList<Ticket>();
    if(jRegEx.getText().trim().equals("")){
      JOptionPane.showMessageDialog(this, "Enter the text to search", "Info", JOptionPane.ERROR_MESSAGE, 
            new javax.swing.ImageIcon(getClass().getResource("/shadow_support/Error.png")));  
      jRegEx.requestFocus();
    }else if(jWhere.getSelectedIndex()<2){
      JOptionPane.showMessageDialog(this, "Select the field to perform the search ", "Info", JOptionPane.ERROR_MESSAGE, 
            new javax.swing.ImageIcon(getClass().getResource("/shadow_support/Error.png")));
      jWhere.requestFocus();
    }else{
      Pattern pattern = Pattern.compile(jRegEx.getText().trim(), Pattern.CASE_INSENSITIVE|Pattern.MULTILINE);
      
      for(Ticket ticket: tickets) {
        Matcher matcher = pattern.matcher(getTextTicket(ticket, jWhere.getSelectedIndex()));
        if (matcher.find()) {
          ticketsthatmatch.add(ticket);
        }
      }
      
      if(ticketsthatmatch.size()>0){
        tickets.clear();
        tickets.addAll(ticketsthatmatch);
        showTicket(0);
        stateControls(States.STATE_SEARCHED);
        
        JOptionPane.showMessageDialog(this, tickets.size() + " Tickets match with the specified search data",
                "Info", JOptionPane.ERROR_MESSAGE, 
              new javax.swing.ImageIcon(getClass().getResource("/shadow_support/Info.png")));
      }else{
        JOptionPane.showMessageDialog(this, "No Tickets match with the specified search data", "Info", JOptionPane.ERROR_MESSAGE, 
              new javax.swing.ImageIcon(getClass().getResource("/shadow_support/Error.png")));
      }
    }    
  }

  private void cancel() {
    cleanAllBoxes();    
    showTicket(iCurrentTicket);
    stateControls(States.STATE_CANCELLED);
  }
  
  private void activateAllBoxes(){
    jTicketid.setEnabled(true);
    jProblemreported.setEnabled(true);
    jCategory.setEnabled(true);
    jPreviousassigmentgroup.setEnabled(true);
    jTypeofsolution.setEnabled(true);
    jStepstosolveit.setEnabled(true);
    jAveragehrs.setEnabled(true);
    jScriptusedforsolution.setEnabled(true);
    jSolutionartifactsharedSi.setEnabled(true);
    jSolutionartifactsharedNo.setEnabled(true);
    jSolutionartifactsharedNA.setEnabled(true);
    jOthersupportteams.setEnabled(true);
    jResourcescontacted.setEnabled(true);
    jEscalationrequiredSi.setEnabled(true);
    jEscalationrequiredNo.setEnabled(true);
    jEscalationprocess.setEnabled(true);
    jChangerequestneededSi.setEnabled(true);
    jChangerequestneededNo.setEnabled(true);
    jSolveddate.setEnabled(true);
    jReporteddate.setEnabled(true);
    jSolvedby.setEnabled(true);
  }
  
  private void deactivateAllBoxes(){
    jTicketid.setEnabled(false);
    jProblemreported.setEnabled(false);
    jCategory.setEnabled(false);
    jPreviousassigmentgroup.setEnabled(false);
    jTypeofsolution.setEnabled(false);
    jStepstosolveit.setEnabled(false);
    jAveragehrs.setEnabled(false);
    jScriptusedforsolution.setEnabled(false);
    jSolutionartifactsharedSi.setEnabled(false);
    jSolutionartifactsharedNo.setEnabled(false);
    jSolutionartifactsharedNA.setEnabled(false);
    jOthersupportteams.setEnabled(false);
    jResourcescontacted.setEnabled(false);
    jEscalationrequiredSi.setEnabled(false);
    jEscalationrequiredNo.setEnabled(false);
    jEscalationprocess.setEnabled(false);
    jChangerequestneededSi.setEnabled(false);
    jChangerequestneededNo.setEnabled(false);
    jSolveddate.setEnabled(false);
    jReporteddate.setEnabled(false);
    jSolvedby.setEnabled(false);
  }
  
  private void stateControls(States state){
    switch(state){
      case STATE_CONNECTED:
        deactivateAllBoxes();
        deactivateAllButtons();
        
        jNew.setEnabled(true);
        jDownload.setEnabled(true);
        
        setLabelStatus("Connected to the Tickets DB", "/shadow_support/Connected16.png");
      break;

      case STATE_NEWED:
        activateAllBoxes();
        deactivateAllButtons();
        cleanAllBoxes();

        jSave.setEnabled(true);
        jCancel.setEnabled(true);
        jDownload.setEnabled(false);

        setLabelStatus("New Ticket", "/shadow_support/New File16.png");
      break;

      case STATE_SAVED:
        deactivateAllBoxes();
        deactivateAllButtons();

        jNew.setEnabled(true);        
        jDownload.setEnabled(true);
        jExport.setEnabled(true);
        if(tickets.size()>0){
          jDuplicate.setEnabled(true);
          jEdit.setEnabled(true);
          jDelete.setEnabled(true);
          jRecords.setEnabled(true);
        }
        
        if(bDownloaded){
          jRegEx.setEnabled(true);
          jWhere.setEnabled(true);
          jFind.setEnabled(true);
        } 
        
        stateRecordButtons();
        setLabelStatus("Ticket saved", "/shadow_support/Save Close16.png");
      break;

      case STATE_UPDATED:
        activateAllBoxes();
        jTicketid.setEnabled(false);
        deactivateAllButtons();

        jSave.setEnabled(true);
        jCancel.setEnabled(true);
        jDownload.setEnabled(false);

        setLabelStatus("Updating Ticket ID " + jTicketid.getText(), "/shadow_support/Create New16.png");
      break;

      case STATE_DELETED:
        deactivateAllBoxes();
        deactivateAllButtons();

        jNew.setEnabled(true);
        jDownload.setEnabled(true);
        if(tickets.size()>0){
          jDuplicate.setEnabled(true);
          jEdit.setEnabled(true);
          jDelete.setEnabled(true);
          jRecords.setEnabled(true);
        }
        
        if(bDownloaded){
          jRegEx.setEnabled(true);
          jWhere.setEnabled(true);
          jFind.setEnabled(true);
        } 
        
        stateRecordButtons();
        setLabelStatus("Ticket deleted", "/shadow_support/Edit16.png");
      break;      

      case STATE_EXPORTED:
        deactivateAllBoxes();
        deactivateAllButtons();

        jNew.setEnabled(true);
        jDownload.setEnabled(true);
        jExport.setEnabled(true);
        if(tickets.size()>0){
          jDuplicate.setEnabled(true);
          jEdit.setEnabled(true);
          jDelete.setEnabled(true);
          jRecords.setEnabled(true);
        }
        
        if(bDownloaded){
          jRegEx.setEnabled(true);
          jWhere.setEnabled(true);
          jFind.setEnabled(true);
        } 
        
        stateRecordButtons();
        setLabelStatus("Data exported", "/shadow_support/Export16.png");
      break;

      case STATE_SEARCHED:
        deactivateAllBoxes();
        deactivateAllButtons();
        
        jNew.setEnabled(true);
        jDownload.setEnabled(true);
        jExport.setEnabled(true);
        if(tickets.size()>0){
          jDuplicate.setEnabled(true);
          jEdit.setEnabled(true);
          jDelete.setEnabled(true);
          jRecords.setEnabled(true);
        }
              
        if(bDownloaded){
          jRegEx.setEnabled(true);
          jWhere.setEnabled(true);
          jFind.setEnabled(true);
        } 
        
        stateRecordButtons();
        setLabelStatus("Tickets filtered by the field " + String.valueOf(jWhere.getSelectedItem()) 
                + " ( " + tickets.size() + " )", "/shadow_support/Filter16.png");
      break;

      case STATE_CANCELLED:
        deactivateAllBoxes();
        deactivateAllButtons();

        jNew.setEnabled(true);
        jDownload.setEnabled(true);
        if(tickets.size()>0){
          jDuplicate.setEnabled(true);
          jEdit.setEnabled(true);
          jDelete.setEnabled(true);
          jRecords.setEnabled(true);
        }
                
        if(bDownloaded){
          jRegEx.setEnabled(true);
          jWhere.setEnabled(true);
          jFind.setEnabled(true);
        } 
        
        stateRecordButtons();
        setLabelStatus("Showing Ticket: " + (iCurrentTicket+1) + " Ticket ID: " 
                + jTicketid.getText(), "/shadow_support/Document16.png");
      break;
      
      case STATE_DOWNLOADED:
        deactivateAllBoxes();
        deactivateAllButtons();

        jNew.setEnabled(true);
        jDownload.setEnabled(true);
        jExport.setEnabled(true);
        if(tickets.size()>0){
          jDuplicate.setEnabled(true);
          jEdit.setEnabled(true);
          jDelete.setEnabled(true);
          jRecords.setEnabled(true);
        }
                
        if(bDownloaded){
          jRegEx.setEnabled(true);
          jWhere.setEnabled(true);
          jFind.setEnabled(true);
        } 
        
        stateRecordButtons();
        setLabelStatus("Tickets downloaded ( " + tickets.size() + " )", "/shadow_support/Download from the cloud16.png");
      break;
      
      case STATE_MOVED:
        deactivateAllBoxes();
        deactivateAllButtons();
        
        jNew.setEnabled(true);
        jDownload.setEnabled(true);
        jExport.setEnabled(true);
        if(tickets.size()>0){
          jDuplicate.setEnabled(true);
          jEdit.setEnabled(true);
          jDelete.setEnabled(true);
          jRecords.setEnabled(true);
        }
                
        if(bDownloaded){
          jRegEx.setEnabled(true);
          jWhere.setEnabled(true);
          jFind.setEnabled(true);
        } 
        
        stateRecordButtons();
        setLabelStatus("Showing Ticket: " + (iCurrentTicket+1) + " Ticket ID: " 
                + jTicketid.getText(), "/shadow_support/Document16.png");
      break;
      
      case STATE_DUPLICATED:
        activateAllBoxes();
        deactivateAllButtons();

        jSave.setEnabled(true);
        jCancel.setEnabled(true);
        jDownload.setEnabled(false);
        setLabelStatus("New Ticket", "/shadow_support/New File16.png");
      break;
      
      case STATE_RELOADED:
        deactivateAllBoxes();
        deactivateAllButtons();
        
        jNew.setEnabled(true);
        jDownload.setEnabled(true);
        jExport.setEnabled(true);
        if(tickets.size()>0){
          jDuplicate.setEnabled(true);
          jEdit.setEnabled(true);
          jDelete.setEnabled(true);
          jRecords.setEnabled(true);
        }
                
        if(bDownloaded){
          jRegEx.setEnabled(true);
          jWhere.setEnabled(true);
          jFind.setEnabled(true);
        } 
        
        stateRecordButtons();
        setLabelStatus("Showing Ticket: " + (iCurrentTicket+1) + " Ticket ID: " 
                + jTicketid.getText(), "/shadow_support/Document16.png");
      break;
    }      
  }

  private void deactivateAllButtons() {
    jNew.setEnabled(false);
    jDuplicate.setEnabled(false);
    jSave.setEnabled(false);
    jEdit.setEnabled(false);
    jCancel.setEnabled(false);
    jDelete.setEnabled(false);    
    jRegEx.setEnabled(false);
    jWhere.setEnabled(false);
    jFind.setEnabled(false);
    jCancel.setEnabled(false);
    jDownload.setEnabled(false);
    jExport.setEnabled(false);
    jFirst.setEnabled(false);
    jPrevious.setEnabled(false);
    jNext.setEnabled(false);
    jLast.setEnabled(false);   
    jRecords.setEnabled(false);
  }
  
  private void activateAllButtons() {
    jNew.setEnabled(true);
    jDuplicate.setEnabled(true);
    jSave.setEnabled(true);
    jEdit.setEnabled(true);
    jCancel.setEnabled(true);
    jDelete.setEnabled(true);
    jRegEx.setEnabled(true);
    jWhere.setEnabled(true);
    jFind.setEnabled(true);
    jCancel.setEnabled(true);
    jDownload.setEnabled(false);
    jExport.setEnabled(true);
    jFirst.setEnabled(true);
    jPrevious.setEnabled(true);
    jNext.setEnabled(true);
    jLast.setEnabled(true);
    jRecords.setEnabled(true);
  }  

  private void cleanAllBoxes() {
    jTicketid.setText("");
    jProblemreported.setText("");
    jPreviousassigmentgroup.setText("");
    jTypeofsolution.setText("");
    jStepstosolveit.setText("");
    jScriptusedforsolution.setText("");
    jSolutionartifactsharedSi.setSelected(false);
    jSolutionartifactsharedNo.setSelected(false);
    jSolutionartifactsharedNA.setSelected(true);
    jOthersupportteams.setText("");
    jResourcescontacted.setText("");
    jEscalationrequiredSi.setSelected(false);
    jEscalationrequiredNo.setSelected(true);
    jEscalationprocess.setText("");
    jChangerequestneededSi.setSelected(false);
    jChangerequestneededNo.setSelected(true);
    jSolveddate.setText("");
    jReporteddate.setText("");
    jSolvedby.setText("");
  }

  private void showTicket(int iTicketNum) {
    jTicketid.setText(tickets.get(iTicketNum).getTicketid());
    jProblemreported.setText(tickets.get(iTicketNum).getProblemreported());
    jCategory.setText(tickets.get(iTicketNum).getCategory());
    jPreviousassigmentgroup.setText(tickets.get(iTicketNum).getPreviousassigmentgroup());
    jTypeofsolution.setText(tickets.get(iTicketNum).getTypeofsolution());
    jStepstosolveit.setText(tickets.get(iTicketNum).getStepstosolveit());
    int iAveragehrs = 1;
    if(tickets.get(iTicketNum).getAveragehrstosolveit()!=null)
      iAveragehrs = Integer.valueOf(tickets.get(iTicketNum).getAveragehrstosolveit());
    jAveragehrs.setValue(iAveragehrs);
    jScriptusedforsolution.setText(tickets.get(iTicketNum).getScriptusedforsolution());        
    jOthersupportteams.setText(tickets.get(iTicketNum).getOthersupportteams());
    jResourcescontacted.setText(tickets.get(iTicketNum).getResourcescontacted());    
    jEscalationprocess.setText(tickets.get(iTicketNum).getEscalationprocess());
    if(tickets.get(iTicketNum).getSolveddate()==null){
      jSolveddate.setText("-");
    }else{
      jSolveddate.setText(tickets.get(iTicketNum).getSolveddateText());
    }
    if(tickets.get(iTicketNum).getReporteddate()==null){
      jReporteddate.setText("-");
    }else{
      jReporteddate.setText(tickets.get(iTicketNum).getReporteddateText());
    }
    jSolvedby.setText(tickets.get(iTicketNum).getSolvedby());
    
    if(tickets.get(iTicketNum).getSolutionartifactshared().equals("N/A")){
      jSolutionartifactsharedNA.setSelected(true);
      jSolutionartifactsharedSi.setSelected(false);
      jSolutionartifactsharedNo.setSelected(false);
    }else{
      if(tickets.get(iTicketNum).getSolutionartifactshared().equals("Sí")){
        jSolutionartifactsharedSi.setSelected(true);
        jSolutionartifactsharedNo.setSelected(false);
        jSolutionartifactsharedNA.setSelected(false);
      }else{
        jSolutionartifactsharedNo.setSelected(true);
        jSolutionartifactsharedSi.setSelected(false);
        jSolutionartifactsharedNA.setSelected(false);
      }

      if(tickets.get(iTicketNum).getEscalationrequired().equals("Sí")){
        jEscalationrequiredSi.setSelected(true);
        jEscalationrequiredNo.setSelected(false);
      }else{
        jEscalationrequiredNo.setSelected(true);
        jEscalationrequiredSi.setSelected(false);
      }

      if(tickets.get(iTicketNum).getChangerequestneeded().equals("Sí")){
        jChangerequestneededSi.setSelected(true);
        jChangerequestneededNo.setSelected(false);
      }else{
        jChangerequestneededNo.setSelected(true);
        jChangerequestneededSi.setSelected(false);
      }
    }
    
    iCurrentTicket = iTicketNum;
  }

  private void stateRecordButtons() {
    if(iCurrentTicket==0&&tickets.size()!=1){
      jNext.setEnabled(true);
      jLast.setEnabled(true);
    }
    else if(iCurrentTicket<(tickets.size()-1)){
      jFirst.setEnabled(true);
      jPrevious.setEnabled(true);      
      jNext.setEnabled(true);
      jLast.setEnabled(true);
    }    
    else if(iCurrentTicket==(tickets.size()-1)&&tickets.size()!=1){
      jFirst.setEnabled(true);
      jPrevious.setEnabled(true); 
    }    
    jRecords.setText((iCurrentTicket + 1) + " of " + tickets.size() + " registers");
    
  }

  private void connect() {
    if(!bConnected){      
      jConnect.setIcon(new javax.swing.ImageIcon(getClass().getResource("/shadow_support/Connected.png")));
      bConnected = true;
      stateControls(States.STATE_CONNECTED);
      try {
        mongo = new MongoClient(uri);
        DB db = mongo.getDB("shadow_support");
        DBCollection collection = db.getCollection("support");

        DBObject doc = collection.findOne();
      } catch (UnknownHostException ex) {
        Logger.getLogger(Frame.class.getName()).log(Level.SEVERE, null, ex);
      } finally{
        mongo.close();
      }
    }
  }
  
  public String getTextTicket(Ticket ticket, int iOption) {
    String sTextField = "";
    switch(iOption){
      case 2:
        sTextField = ticket.getTicketid();
      break;
      
      case 3:
        sTextField = ticket.getProblemreported();
      break;
      
      case 4:
        sTextField = ticket.getCategory();
      break;
      
      case 5:
        sTextField = ticket.getReporteddateText();
      break;
      
      case 6:
        sTextField = ticket.getPreviousassigmentgroup();
      break;
      
      case 7:
        sTextField = ticket.getTypeofsolution();
      break;
      
      case 8:
        sTextField = ticket.getSolveddateText();
      break;
      
      case 9:
        sTextField = ticket.getSolvedby();
      break;
      
      case 10:
        sTextField = ticket.getStepstosolveit();
      break;
      
      case 11:
        sTextField = ticket.getScriptusedforsolution();
      break;

      case 12:
        sTextField = ticket.getSolutionartifactshared();
      break;
      
      case 13:
        sTextField = ticket.getOthersupportteams();
      break;
      
      case 14:
        sTextField = ticket.getResourcescontacted();
      break;
      
      case 15:
        sTextField = ticket.getEscalationrequired();
      break;

      case 16:
        sTextField = ticket.getEscalationprocess();
      break;      

      case 17:
        sTextField = ticket.getChangerequestneeded();
      break;      
    }
    
    return (sTextField==null)? "": sTextField;
  }

  private void export() {
    boolean exception = false;
    
    JFileChooser fileChooser = new JFileChooser();
    fileChooser.setDialogTitle("Guardar archivo como");    
        
    if(fileChooser.showSaveDialog(this) == JFileChooser.APPROVE_OPTION){
      File fileCh = fileChooser.getSelectedFile();
      fileCh = new File(fileCh.getAbsolutePath() + ".xls");
      FileInputStream file = null;
      FileOutputStream outFile = null;
      
      try{        
        file = new FileInputStream(new File("Shadow_Support_Ticket_Reporting.xls"));
        
        HSSFWorkbook workbook = new HSSFWorkbook(file);
        HSSFSheet sheet = workbook.getSheetAt(0);
        int iRow = 6;
        for(Ticket ticket: tickets){
          int iCell = 0;
          Row row = sheet.createRow(iRow++);
          Cell cell = row.createCell(iCell++);
            
          cell.setCellValue(ticket.getTicketid());
          cell = row.createCell(iCell++);
          cell.setCellValue(ticket.getProblemreported());
          cell = row.createCell(iCell++);
          cell.setCellValue(ticket.getCategory());
          cell = row.createCell(iCell++);
          cell.setCellValue(ticket.getReporteddateText());
          cell = row.createCell(iCell++);
          cell.setCellValue(ticket.getPreviousassigmentgroup());
          cell = row.createCell(iCell++);
          cell.setCellValue(ticket.getTypeofsolution());
          cell = row.createCell(iCell++);
          cell.setCellValue(ticket.getStepstosolveit());
          cell = row.createCell(iCell++);
          cell.setCellValue(ticket.getAveragehrstosolveit());
          cell = row.createCell(iCell++);
          cell.setCellValue(ticket.getScriptusedforsolution());
          cell = row.createCell(iCell++);
          cell.setCellValue(ticket.getSolutionartifactshared());
          cell = row.createCell(iCell++);
          cell.setCellValue(ticket.getOthersupportteams());
          cell = row.createCell(iCell++);
          cell.setCellValue(ticket.getResourcescontacted());
          cell = row.createCell(iCell++);
          cell.setCellValue(ticket.getEscalationrequired());
          cell = row.createCell(iCell++);
          cell.setCellValue(ticket.getEscalationprocess());
          cell = row.createCell(iCell++);
          cell.setCellValue(ticket.getChangerequestneeded());
          cell = row.createCell(iCell++);
          cell.setCellValue(ticket.getSolveddateText());
          cell = row.createCell(iCell++);
          cell.setCellValue(ticket.getSolvedby());
        }
        
        outFile = new FileOutputStream(fileCh);       
        workbook.write(outFile);  

      } catch (FileNotFoundException e) {
        exception = true;
      } catch (IOException e) {
        exception = true;
      } finally{
        try {
          try {
            file.close();
          } catch (IOException ex) {
            Logger.getLogger(Frame.class.getName()).log(Level.SEVERE, null, ex);
          }
          outFile.close();
        } catch (IOException ex) {
          Logger.getLogger(Frame.class.getName()).log(Level.SEVERE, null, ex);
        }
      }
      
      if(!exception){
        JOptionPane.showMessageDialog(this, "The data has been exported to file: \n\n" + fileCh.getPath() + "\n\n", 
                "Info", JOptionPane.INFORMATION_MESSAGE, 
              new javax.swing.ImageIcon(getClass().getResource("/shadow_support/Export.png")));
        try {
          Desktop.getDesktop().open(fileCh);
        } catch (IOException ex) {
          Logger.getLogger(Frame.class.getName()).log(Level.SEVERE, null, ex);
        }
      }
    }    
  }

  private void reloadTickets() {
    stateControls(States.STATE_RELOADED);
  }

  private void duplicate() {
    activateAllBoxes();
    jTicketid.setText("");
    jTicketid.requestFocus();
    stateControls(States.STATE_DUPLICATED);
  }
  
  private void setLabelStatus(String sText, String sIconImage){
    jLabel1.setText(sText);
    jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource(sIconImage))); 
  }
}
